{"version":3,"sources":["components/ProjectForm.js","components/ProjectList.js","components/Projects.js","components/TodoForm.js","components/TodoList.js","components/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["ProjectForm","addProj","curProject","useState","id","project","completable","proj","setProj","onSubmit","e","preventDefault","trim","uuid","v4","name","type","value","onChange","target","className","placeholder","ProjectList","button","nowFolder","setProject","removeProject","onClick","innerText","Projects","map","item","TodoForm","addTodo","task","completed","todo","setTodo","projectList","onF","TodoList","curTask","toggleComplete","removeTodo","style","textDecoration","Todo","curFolder","includedTodos","filter","includes","filteredItem","LOCAL_STORAGE_TASKS","LOCAL_STORAGE_PROJECTS","initFolder","initProjects","App","setFolder","setTask","useEffect","storageTasks","JSON","parse","localStorage","getItem","setItem","stringify","storageProjects","projectValue","tempProj","window","confirm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfed4155.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport uuid from 'uuid';\r\n\r\nconst ProjectForm = ({addProj, curProject}) => {\r\n\r\n    const [proj, setProj] = useState({\r\n        id: \"\",\r\n        project: \"\",\r\n        completable: true\r\n    });\r\n\r\n    //Changes proj state on input change\r\n    const handleTaskInputChange = (e) => {\r\n        setProj({...proj, project: e.target.value});\r\n    }\r\n\r\n    //Submits project list change\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(proj.project.trim()) {\r\n            addProj({...proj, id: uuid.v4()});\r\n            setProj({ ...proj, project: \"\"}); //Reset textbox\r\n        };\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <input \r\n                name=\"task\"\r\n                type=\"text\"\r\n                value={proj.project}\r\n                onChange={handleTaskInputChange}\r\n                className=\"projectInput form\" \r\n                placeholder=\"Enter task here\"\r\n                />\r\n                <button type=\"submit\" className=\"taskButton projectAdd\">\r\n                +\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectForm;","import React from 'react';\r\n\r\nconst ProjectList = ({curProject, setProject, nowFolder, removeProject}) => {\r\n\r\n    const handleClick = (e) => {\r\n        nowFolder(e.target.innerText);\r\n    };\r\n\r\n    const deleteProject = () => {\r\n        removeProject(curProject);\r\n    };\r\n\r\n    let button;\r\n    if (curProject.completable === true) {\r\n        button = <button className=\"ex\" onClick={deleteProject} type=\"button\"> X </button>\r\n    }\r\n    else {\r\n        button = null;\r\n    };\r\n\r\n    return <div className=\"listItem projectItem\">\r\n        <div className=\"list\" onClick={handleClick}> {curProject.project} </div>\r\n        {button}\r\n    </div>\r\n}\r\n\r\nexport default ProjectList;","import React from 'react';\r\nimport ProjectForm from './ProjectForm';\r\nimport ProjectList from './ProjectList';\r\n\r\nconst Projects = ({ addProj, curProject, nowFolder, removeProject}) => {\r\n    return (\r\n        <div className=\"projects\">\r\n            <h1 className=\"header\"> Projects </h1>\r\n            <ProjectForm addProj={addProj} curProject={curProject} />\r\n            {curProject.map((item) => <ProjectList key={item.id} curProject={item} nowFolder={nowFolder} removeProject={removeProject} /> )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Projects;","import React,{useState} from 'react';\r\nimport uuid from 'uuid';\r\n\r\nconst TodoForm = ({addTodo, curProject}) => {\r\n\r\n    const [todo, setTodo] = useState({\r\n        id: \"\",\r\n        task: \"\",\r\n        project: \"inbox\",\r\n        completed: false\r\n    });\r\n\r\n    const handleTaskInputChange = (e) => {\r\n        setTodo({...todo, task: e.target.value});\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(todo.task.trim()) {\r\n            addTodo({...todo, id: uuid.v4()});\r\n            setTodo({ ...todo, task: \"\"}); //Reset task\r\n        };\r\n    }\r\n\r\n    const handleSelect = (e) => {\r\n        setTodo({...todo, project: e.target.value});\r\n    }\r\n\r\n    let projectList = curProject.map((item) => <option key={item.id}>{item.project}</option>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <input \r\n                name=\"task\"\r\n                type=\"text\"\r\n                value={todo.task}\r\n                onChange={handleTaskInputChange}\r\n                className=\"taskInput form\" \r\n                placeholder=\"Enter task here\"\r\n                />\r\n                <select onChange={handleSelect} onF>\r\n                    {projectList}\r\n                </select>\r\n                <button type=\"submit\" className=\"taskButton taskAdd\">+</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoForm;","import React from 'react';\r\n\r\nconst TodoList = ({curTask, toggleComplete, removeTodo}) => {\r\n\r\n    const handleCheckbox = () => toggleComplete(curTask.id);\r\n\r\n    const handleDelete = () => removeTodo(curTask.id);\r\n\r\n    return (\r\n        <div className=\"listItem todoItem\">\r\n            <button className=\"ex green\" onClick={handleCheckbox} type=\"checkbox\">âœ“</button>\r\n            <div className=\"list\" style={{textDecoration: curTask.completed ? \"line-through\" : null}}> {curTask.task}</div>\r\n            <button className=\"ex \" onClick={handleDelete} type=\"button\">X</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport TodoList from './TodoList';\r\n\r\nconst Todo = ({addTodo, curTask, curProject, curFolder, toggleComplete, removeTodo}) => {\r\n    let includedTodos = curTask\r\n        // .filter(item => item?.project?.includes(curFolder))\r\n        .filter(item => item&&item.project&&item.project.includes(curFolder))\r\n        .map((filteredItem) => <TodoList key={filteredItem.id} curTask={filteredItem} toggleComplete={toggleComplete} removeTodo={removeTodo}/>);\r\n\r\n    return(\r\n        <div className=\"tasks\">\r\n            <h1 className=\"header taskHeader\"> {curFolder} </h1>\r\n            <TodoForm addTodo={addTodo} curProject={curProject}/>\r\n            {includedTodos}  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo;","import React,{useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport Projects from './components/Projects';\r\nimport Todo from './components/Todo';\r\n\r\nconst LOCAL_STORAGE_TASKS = \"todoing-tasks\";\r\nconst LOCAL_STORAGE_PROJECTS = \"todoing-projects\";\r\nconst initFolder = [\"inbox\"];\r\nconst initProjects = [{ id: \"b1\", project: \"inbox\", completable: false }];\r\n\r\nconst App = () => {\r\n\r\n  // const clearing = () => {\r\n  //   localStorage.setItem(LOCAL_STORAGE_TASKS, JSON.stringify([]));\r\n  //   localStorage.setItem(LOCAL_STORAGE_PROJECTS, JSON.stringify(initProjects));\r\n  //   console.log('clearing');\r\n  // }\r\n\r\n\r\n  const [curFolder, setFolder] = useState(initFolder);\r\n  const [curProject, setProject] = useState(initProjects);\r\n  const [curTask, setTask] = useState([]);\r\n\r\n  //Retrieves tasks from local storage when the page loads\r\n  useEffect(() => {\r\n    const storageTasks = JSON.parse(localStorage.getItem(LOCAL_STORAGE_TASKS));\r\n    if(storageTasks){\r\n      setTask(storageTasks); //Will set tasks if storageTasks isn't null\r\n    }\r\n    \r\n  }, [])\r\n  //Saves tasks to local storage any time curTask changes\r\n  useEffect(() => {\r\n    localStorage.setItem(LOCAL_STORAGE_TASKS, JSON.stringify(curTask));\r\n  }, [curTask]);\r\n\r\n  //Retrieves projects from local storage on load\r\n  useEffect(() => {\r\n    const storageProjects = JSON.parse(localStorage.getItem(LOCAL_STORAGE_PROJECTS));\r\n    if(storageProjects) {\r\n      setProject(storageProjects);\r\n    }\r\n  }, []);\r\n  //Saves projects to local storage when curProject changes\r\n  useEffect(() => {\r\n    localStorage.setItem(LOCAL_STORAGE_PROJECTS, JSON.stringify(curProject));\r\n  }, [curProject]);\r\n\r\n  const addTodo = (todo) => {\r\n    setTask([todo, ...curTask]);\r\n  };\r\n\r\n  const addProj = (proj) => {\r\n    setProject([...curProject, proj ])\r\n  };\r\n\r\n  const nowFolder = (projectValue) => {\r\n    setFolder(projectValue);\r\n  } \r\n\r\n  const toggleComplete = (id) => {\r\n    setTask(\r\n      curTask.map(item => {\r\n        if(item.id === id) {\r\n          return {...item, completed: !item.completed};\r\n        }\r\n        return item;\r\n      })\r\n    )\r\n  }\r\n\r\n  const removeTodo = (id) => {\r\n    setTask(curTask.filter(item => item.id !== id));\r\n  }\r\n\r\n  const removeProject = (tempProj) => {\r\n    if (window.confirm('Deleting a project deletes all tasks sorted beneath it. Are you sure you want to delete?')) {\r\n      setProject(curProject.filter(item => item.id !== tempProj.id));\r\n      setTask(curTask.filter(item => item.project !== tempProj.project));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"bigtext\">\r\n        <div>ToDoing by Michael Riccio</div>\r\n      </header>\r\n      {/* <button className=\"clearing\" onClick={clearing} type='button'>X</button> */}\r\n      <div className=\"center\">\r\n        <Projects addProj={addProj} curProject={curProject} setProject={setProject} nowFolder={nowFolder} removeProject={removeProject} />\r\n        <Todo addTodo={addTodo}  curTask={curTask} curProject={curProject} curFolder={curFolder} toggleComplete={toggleComplete} removeTodo={removeTodo}/>\r\n      </div>\r\n      <footer className=\"bigtext\">\r\n        <div>Â© Michael Riccio 2020</div>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}